/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// @ts-nocheck

import { a, useSpring } from "@react-spring/three";
import { Image, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useEffect, useRef, useState } from "react";
import ReactGA from 'react-ga';

interface CameraProps {
  photoUrls: string[]
}

const Camera:React.FC<CameraProps> = ({photoUrls, ...props}) => {
  const { nodes, materials } = useGLTF("/camera_xyz_blend.glb");
  const [photoIdx, setPhotoIdx] = useState(0)
  const ref = useRef<any>()
  const [hovered, hover] = useState(false)
  const { rotY } = useSpring({ rotY: hovered ? 3.3*Math.PI/2:3.4*Math.PI/2 })

  const trackEvent = () => {
    ReactGA.event({
      category: 'Hero',
      action: 'CameraClick',
    })
  }

  useEffect(() => {
    const switchPicture = () => {
      setPhotoIdx(p => (p+1)%photoUrls.length)
    }
    const interval = setInterval(switchPicture, 5000)

    if (ref.current) {
      ref.current.rotation.x = 0
      ref.current.rotation.y = 0
      ref.current.rotation.z = 0
    }

    return () => {
      clearInterval(interval)
    }
  }, [])

  useFrame((state) => {
    if (ref.current) {
      const t = state.clock.getElapsedTime()
      ref.current.rotation.y = rotY.get() + Math.sin(t / 4) / 8
      ref.current.rotation.z = (1 + Math.sin(t / 1.5)) / 20
    }
  })

  return (
    <a.group {...props} dispose={null} ref={ref} onClick={trackEvent} onPointerOver={() => hover(true)} onPointerOut={() => hover(false)}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008.geometry}
        material={materials.Skin}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_1.geometry}
        material={materials.Metal}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_2.geometry}
        material={materials.MetalShadow}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_3.geometry}
        material={materials.Display}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_4.geometry}
        material={materials.Display1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_5.geometry}
        material={materials.Glass}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_6.geometry}
        material={materials.Wheel}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_7.geometry}
        material={materials.Metal3}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_8.geometry}
        material={materials["2"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_9.geometry}
        material={materials.Bolt1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_10.geometry}
        material={materials.Metal6}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_11.geometry}
        material={materials.Wheel2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_12.geometry}
        material={materials.Metal4}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_13.geometry}
        material={materials["3"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_14.geometry}
        material={materials.Metal5}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_15.geometry}
        material={materials.Bolt}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_16.geometry}
        material={materials.Red}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wBox008_17.geometry}
        material={materials["1"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Screen.geometry}
        material={materials.Display1}
        position={[1.27, -0.29, 0.42]}
      >
        <Image url={photoUrls[photoIdx]} scale={[2.8,1.5]} position={[0.02, 0, 0]} rotation={[0, Math.PI/2, 0]}/>
      </mesh>
    </a.group>
  );
}

export default Camera

useGLTF.preload("/camera_xyz_blend.glb");
